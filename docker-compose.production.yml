version: '3.8'

services:
  # Luna Agent Main Application
  luna-agent:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: luna-agent-production
    restart: unless-stopped
    ports:
      - "3000:3000"     # Main API
      - "3001:3001"     # WebSocket
      - "3002:3002"     # Voice Streaming
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - MONGODB_URL=mongodb://mongodb:27017/luna
    volumes:
      - ./logs:/app/logs
      - ./memory:/app/memory
      - ./cache:/app/cache
      - ./uploads:/app/uploads
    networks:
      - luna-network
    depends_on:
      - redis
      - postgres
      - mongodb
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: luna-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - luna-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: luna-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-luna}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-luna_secure_password}
      - POSTGRES_DB=${POSTGRES_DB:-luna_production}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - luna-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-luna}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB for Document Storage
  mongodb:
    image: mongo:6-jammy
    container_name: luna-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-mongo_secure_password}
      - MONGO_INITDB_DATABASE=luna
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
    networks:
      - luna-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: luna-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - luna-network
    depends_on:
      - luna-agent
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: luna-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - luna-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: luna-grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - luna-network
    depends_on:
      - prometheus

volumes:
  redis-data:
  postgres-data:
  mongo-data:
  mongo-config:
  prometheus-data:
  grafana-data:

networks:
  luna-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16