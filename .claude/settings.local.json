{
  "permissions": {
    "allow": [
      "Bash(npm run build:*)",
      "Bash(npm run package:win:*)",
      "Bash(npm run rebuild:*)",
      "Bash(npm install:*)",
      "Bash(npx electron-rebuild:*)",
      "Bash(rm:*)",
      "Bash(ELECTRON_SKIP_BINARY_DOWNLOAD=1 npm install --ignore-scripts)",
      "Bash(grep:*)",
      "Bash(npm start)",
      "Bash(electron:*)",
      "Bash(npx:*)",
      "Bash(ss:*)",
      "Bash(pkill:*)",
      "Bash(true)",
      "Bash(node:*)",
      "Bash(ls:*)",
      "Bash(cat:*)",
      "Bash(find:*)",
      "Bash(env)",
      "Bash(npm run typecheck:*)",
      "Bash(npm test:*)",
      "Bash(sed:*)",
      "Bash(LUNA_DISABLE_EMBEDDINGS=1 npm test test/integration/memory.e2e.test.ts)",
      "Bash(LUNA_DISABLE_EMBEDDINGS=1 npm test)",
      "Bash(npm run dev:*)",
      "Bash(killall:*)",
      "Bash(npm run type-check:*)",
      "Bash(npm run:*)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(git reset:*)",
      "Bash(apt list:*)",
      "Bash(git lfs track:*)",
      "Bash(git checkout:*)",
      "Bash(git commit:*)",
      "Bash(tsc --project tsconfig.json)",
      "Bash(cp:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(NODE_ENV=production npx electron dist/app/main/main.js)",
      "Bash(mv:*)",
      "Bash(timeout 30 npm run build)",
      "Bash(timeout:*)",
      "Bash(mkdir:*)",
      "Bash(curl:*)",
      "Bash(powershell:*)",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"Get-Process node,electron -ErrorAction SilentlyContinue | Stop-Process\")",
      "Bash(cd:*)",
      "Read(//mnt/c/dev/**)",
      "Bash(npm uninstall:*)",
      "Bash(npm rebuild:*)",
      "Bash(ip route:*)",
      "Bash(awk:*)",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -ExecutionPolicy Bypass -File /mnt/c/dev/luna-agent-v1.0-production-complete-2/setup-wsl-port-forward.ps1)",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -ExecutionPolicy Bypass -File C:\\dev\\luna-agent-v1.0-production-complete-2\\setup-wsl-port-forward.ps1)",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"Invoke-WebRequest -Uri ''http://localhost:3000/health'' -UseBasicParsing | Select-Object StatusCode, Content\")",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"netsh interface portproxy show v4tov4\")",
      "WebFetch(domain:localhost)",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -ExecutionPolicy Bypass -File \"./voice-probe.ps1\" -Base \"http://localhost:3001\" -Audio \"./fixtures/hello_luna.wav\")",
      "Read(//tmp/**)",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"Test-Path ''C:\\dev\\luna-agent-v1.0-production-complete-2''\")",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"Test-Path ''C:\\dev\\luna-agent-v1.0-production-complete-2\\node_modules\\electron\\dist\\electron.exe''\")",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -ExecutionPolicy Bypass -File C:devluna-agent-v1.0-production-complete-2test-electron-startup.ps1)",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -ExecutionPolicy Bypass -Command \"& ''C:\\dev\\luna-agent-v1.0-production-complete-2\\test-electron-startup.ps1''\")",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -ExecutionPolicy Bypass -Command \"& ''C:\\dev\\luna-agent-v1.0-production-complete-2\\launch-luna.ps1''\")",
      "Bash(tsc:*)",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"Get-Process electron,node -ErrorAction SilentlyContinue | Where-Object {$_Path -like ''*luna-agent*''} | Stop-Process -Force\")",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"Get-Process electron -ErrorAction SilentlyContinue | Where-Object {$_Path -like ''*luna-agent*''} | Stop-Process -Force\")",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"Get-Process electron -ErrorAction SilentlyContinue | Stop-Process -Force\")",
      "Bash(tee:*)",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"Get-WmiObject -Class BatteryFullChargedCapacity -Namespace root/wmi | Select-Object FullChargedCapacity\")",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"Get-WmiObject -Class BatteryStaticData -Namespace root/wmi | Select-Object DesignedCapacity\")",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"Get-WmiObject -Class Win32_Battery | Select-Object BatteryStatus, PowerManagementCapabilities, Chemistry, DesignVoltage, DesignCapacity | Format-List\")",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"Get-WmiObject -Class BatteryStatus -Namespace root/wmi | Select-Object PowerOnline, Charging, Discharging, Voltage, ChargeRate, DischargeRate | Format-List\")",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"Get-CimInstance -ClassName Win32_SystemEnclosure | Select-Object ChassisTypes, PoweredOn, SMBIOSAssetTag | Format-List\")",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"(Get-WmiObject -Class BatteryStatus -Namespace root/wmi).PowerOnline\")",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"powercfg /energy /output C:\\temp\\energy-report.html /duration 10\")",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"Get-PnpDevice | Where-Object { $_FriendlyName -like ''*USB*'' -or $_FriendlyName -like ''*Charging*'' -or $_Class -eq ''USB'' } | Select-Object Status, Class, FriendlyName, InstanceId | Format-Table -AutoSize\")",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"Get-PnpDevice | Where-Object { $_.FriendlyName -like ''*USB*'' -or $_.FriendlyName -like ''*Charging*'' -or $_.Class -eq ''USB'' } | Select-Object Status, Class, FriendlyName | Format-Table -AutoSize\")",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"Get-WmiObject Win32_USBController | Select-Object Name, Status, DeviceID | Format-List\")",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"Get-WmiObject Win32_PortConnector | Where-Object { $_.ConnectorType -ne $null } | Select-Object Tag, ConnectorType, ExternalReferenceDesignator, PortType | Format-Table -AutoSize\")",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"if(Test-Path C:\\temp\\battery-report.html) { Get-Content C:\\temp\\battery-report.html -Raw | Select-String -Pattern ''DESIGN CAPACITY|FULL CHARGE CAPACITY|CYCLE COUNT|AC ADAPTER'' -Context 0,2 } else { Write-Host ''Report not found'' }\")",
      "Bash(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -Command \"New-Item -ItemType Directory -Path C:\\temp -Force | Out-Null; powercfg /batteryreport /output C:\\temp\\battery-report.html; Start-Sleep -Seconds 2; if(Test-Path C:\\temp\\battery-report.html) { Write-Host ''SUCCESS: Report generated'' } else { Write-Host ''FAILED: Report not created'' }\")"
    ],
    "deny": []
  }
}
